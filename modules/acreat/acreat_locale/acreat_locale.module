<?php

/* ---
*
* SQL 
* DELETE FROM `locales_target` WHERE lid IN (SELECT lid FROM `locales_source` WHERE textgroup = 'leasametric');
* DELETE FROM `locales_source` WHERE textgroup = 'leasametric';
*
*/	
	
	
/* -----
* acreat_t
* version modifier de locale
* @see t
*/
function acreat_t($string, $args = array(), $langcode = NULL, $textgroup = "default") {
  global $language;
  static $custom_strings;
  
  $langcode = isset($langcode) ? $langcode : $language->language;

  // First, check for an array of customized strings. If present, use the array
  // *instead of* database lookups. This is a high performance way to provide a
  // handful of string replacements. See settings.php for examples.
  // Cache the $custom_strings variable to improve performance.
  if (!isset($custom_strings[$textgroup][$langcode])) {
    $custom_strings[$textgroup][$langcode] = variable_get('locale_' . $textgroup . '_strings_'. $langcode, array());
  }
  // Custom strings work for English too, even if locale module is disabled.
  if (isset($custom_strings[$textgroup][$langcode][$string])) {
    $string = $custom_strings[$textgroup][$langcode][$string];
  }
  // Translate with locale module if enabled.
  elseif (function_exists('_locale') && $langcode != 'en') {
    $string = _locale($string, $langcode, FALSE, 'leasametric');
  }
  if (empty($args)) {
    return $string;
  }
  else {
    // Transform arguments before inserting them.
    foreach ($args as $key => $value) {
      switch ($key[0]) {
        case '@':
          // Escaped only.
          $args[$key] = check_plain($value);
          break;

        case '%':
        default:
          // Escaped and placeholder.
          $args[$key] = theme('placeholder', $value);
          break;

        case '!':
          // Pass-through.
      }
    }
    return strtr($string, $args);
  }
}

/* -----
* _locale
* version modifier de locale
* @see locale
*/
function _locale($string = NULL, $langcode = NULL, $reset = FALSE, $textgroup = "default") {
  global $language;
  static $locale_t;
  
  if ($reset) {
    // Reset in-memory cache.
    $locale_t[$textgroup] = NULL;
  }

  if (!isset($string)) {
    // Return all cached strings if no string was specified
    return $locale_t[$textgroup];
  }

  $langcode = isset($langcode) ? $langcode : $language->language;

  // Store database cached translations in a static var.
  if (!isset($locale_t[$textgroup][$langcode])) {
    $locale_t[$textgroup][$langcode] = array();
    // Disabling the usage of string caching allows a module to watch for
    // the exact list of strings used on a page. From a performance
    // perspective that is a really bad idea, so we have no user
    // interface for this. Be careful when turning this option off!
    if (variable_get('locale_cache_strings', 1) == 1) {
		if ($cache = cache_get('locale:'.$textgroup.':'.$langcode, 'cache')) {
        $locale_t[$textgroup][$langcode] = $cache->data;
      }
      else {
        // Refresh database stored cache of translations for given language.
        // We only store short strings used in current version, to improve
        // performance and consume less memory.
        $result = db_query("SELECT s.source, t.translation, t.language FROM {locales_source} s LEFT JOIN {locales_target} t ON s.lid = t.lid AND t.language = '%s' WHERE s.textgroup = '%s' AND s.version = '%s' AND LENGTH(s.source) < 75", $langcode, $textgroup, VERSION);
        while ($data = db_fetch_object($result)) {
          $locale_t[$textgroup][$langcode][$data->source] = (empty($data->translation) ? TRUE : $data->translation);
        }
        cache_set('locale:'.$textgroup.':'.$langcode, $locale_t[$textgroup][$langcode]);
      }
    }
  }

  // If we have the translation cached, skip checking the database
  if (!isset($locale_t[$textgroup][$langcode][$string])) {
	
    // We do not have this translation cached, so get it from the DB.
    $translation = db_fetch_object(db_query("SELECT s.lid, t.translation, s.version FROM {locales_source} s LEFT JOIN {locales_target} t ON s.lid = t.lid AND t.language = '%s' WHERE s.source = '%s' AND s.textgroup = '%s'", $langcode, $string, $textgroup));
    if ($translation) {
      // We have the source string at least.
      // Cache translation string or TRUE if no translation exists.
      $locale_t[$textgroup][$langcode][$string] = (empty($translation->translation) ? TRUE : $translation->translation);

      if ($translation->version != VERSION) {
        // This is the first use of this string under current Drupal version. Save version
        // and clear cache, to include the string into caching next time. Saved version is
        // also a string-history information for later pruning of the tables.
        db_query("UPDATE {locales_source} SET version = '%s' WHERE lid = %d", VERSION, $translation->lid);
        cache_clear_all('locale:'.$textgroup, 'cache', TRUE);
      }
    }
    else {
      // We don't have the source string, cache this as untranslated.
      db_query("INSERT INTO {locales_source} (location, source, textgroup, version) VALUES ('%s', '%s', '%s', '%s')", request_uri(), $string, $textgroup, VERSION);
      $locale_t[$textgroup][$langcode][$string] = TRUE;
      // Clear locale cache so this string can be added in a later request.
      cache_clear_all('locale:'.$textgroup, 'cache', TRUE);
    }
  }
	
  return ($locale_t[$textgroup][$langcode][$string] === TRUE ? $string : $locale_t[$textgroup][$langcode][$string]);
}