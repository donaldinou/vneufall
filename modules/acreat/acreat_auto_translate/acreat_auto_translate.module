<?php

/*******************************************************************************
 * HOOKS DRUPAL
 ******************************************************************************/
 
/**
 * hook_requirements() 
 * Check installation requirements and do status reporting.
 */
function acreat_auto_translate_requirements($phase) {
	$t = get_t();
	
	// check i18n
	$mode = variable_get('i18n_selection_mode', 'simple');
	$i18n_error = (module_exists('i18n') && $mode <> "off");
	$requirements['test'] = array(
		'title' => 'i18n multilingual content selection',
		'value' => $i18n_error ?  "Enable" : "Disabled",
	);

	if ($i18n_error) {
		$requirements['test']['description'] = $t('You must deactivate <a href="!url">i18n multilingual content selection</a> to get Acreat Auto Translate work properly', array('!url' => url('admin/settings/i18n')));
		$requirements['test']['severity'] = REQUIREMENT_ERROR;
	}
	
	return $requirements;
}
 
/**
 * hook_nodeapi() 
 * Define menu items and page callbacks.
 */
function acreat_auto_translate_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	global $language;
	switch($op) {
		case "view":
			if( in_array($node->type, array("page", "story")) && $node->language <> $language->language ) {
				// chargement de la traduction d'une page
				$nid = acreat_auto_translate_nid($node);
				if($nid && $nid <> $node->nid) {
					$node = node_load($nid);
					drupal_set_title(check_plain($node->title));
					$node = node_build_content($node, $a3, $a4);
				}
			}
		break;
	}
}

/**
 * hook_link_alter() 
 * Perform alterations before links on a node are rendered. One popular use of this hook is to add/delete links from other modules.
 */
function acreat_auto_translate_link_alter(&$links, &$node) {
	// suppression des liens en bas de node
	foreach($links as $key=>$value) {
		if(preg_match("/^node_translation_/", $key))
			unset($links[$key]);
	}
}

/**
 * Implementation of hook_menu().
 */
function acreat_auto_translate_menu() {
  $items = array();
  $items['node/%node/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'acreat_auto_translate_node_page_edit',
    'page arguments' => array(1),
    'access callback' => 'acreat_auto_translate_node_access',
    'access arguments' => array('update', 1),
    'weight' => 1,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK
  );
  return $items;
}

/*******************************************************************************
 * DIVERS / CALLBACKS
 ******************************************************************************/

/* ---
* acreat_auto_translate_nid
* renvoi le nid correspondant à la langue actuelle
*/
function acreat_auto_translate_nid(&$node) {
	global $language;
	$translations = translation_node_get_translations($node->tnid);
	$nid = $translations[$language->language] ? (int)$translations[$language->language]->nid : (int)$translations[language_default('language')]->nid;
	return $nid;
}

/* ---
* acreat_auto_translate_node_page_edit
* callback du menu de modification d'une page
* @see acreat_auto_translate_menu
*/
function acreat_auto_translate_node_page_edit(&$node) {
	$nid = acreat_auto_translate_nid($node);	
	if($nid && $nid <> $node->nid) 
		drupal_goto("node/$nid/edit");
	return node_page_edit($node);
}

/* ---
* acreat_auto_translate_node_access
* callback du menu de modification d'une page
* @see acreat_auto_translate_menu
*/
function acreat_auto_translate_node_access($op, $node, $account = NULL) {
	$nid = acreat_auto_translate_nid($node);
	if($nid && $nid <> $node->nid) 
		$node = node_load($nid);
	return node_access($op, $node, $account);
}

